; args: [vehicle, shell, side index]

_vehicle = _this select 0; _shell = _this select 1; _si = _this select 2
? !local _shell: exit

_siEnemy = [si0, si1] select (_si == si0)

? ((upgMatrix select _siEnemy) select upgRadarArtillery) != 2: Exit

_radars = [_siEnemy, stComm] call funcGetWorkingStructures

? (count _radars == 0): Exit

_detections = 0

_timeStart = _time

? (isNull _shell): Exit
_radarRange = 15*(CCdistMax select _si); if ((upgMatrix select _si select upgCCdistance) == 2) Then {_radarRange = _radarRange / 10}
#Update
	_posShell = getPos _shell
	; ? (((getPos _shell) select 2) < 20): goto "Skip"
	
	{ if ((_x distance _shell) < 15*_radarRange) then { _detections = _detections + 1 } } foreach _radars

	#Skip
	~0.1
	? !(isNull _shell): goto "Update"

_lifetime = _time - _timeStart

; avoid small arms
? (_lifetime < 3.2): Exit

? (_detections == 0): Exit

_dist = 1000 - 5*_detections
? (_dist < 50): _dist = 50
_dist = random _dist

_dir = random 360
_posRel = [_dist*sin(_dir), _dist*cos(_dir)]

_posX = ( ((getPos _vehicle) select 0) + (_posRel select 0) ) / 10
_posY = ( ((getPos _vehicle) select 1) + (_posRel select 1) ) / 10

_posX = _posX - _posX%1
_posY = _posY - _posY%1

pvArt = _detections + 100000*_siEnemy
pvArtPos = _posX + 3000*_posY

PublicVariable "pvArtPos"
PublicVariable "pvArt"