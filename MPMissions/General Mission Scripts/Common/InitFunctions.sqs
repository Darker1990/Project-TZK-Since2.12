; args: none

funcArrayOverlap = preprocessFile "Common\SQF\ArrayOverlap.sqf"
funcBinaryDigit = preprocessFile "Common\SQF\BinaryDigit.sqf"
funcBoolEqual = preprocessFile "Common\SQF\BoolEqual.sqf"
funcGetAIGroupsIndex = preprocessFile "Common\SQF\GetAIGroupsIndex.sqf"
funcGetRandomPos = preprocessFile "Common\SQF\GetRandomPos.sqf"
funcGetRandomUnitType = preprocessFile "Common\SQF\GetRandomUnitType.sqf"
funcSearchvehicleAttached = preprocessFile "Common\SQF\SearchvehicleAttached.sqf"
funcSort = preprocessFile "Common\SQF\Sort.sqf"
funcUpdateAttaching = preprocessFile "Common\SQF\UpdateAttaching.sqf"
fDebugLog = preprocessFile "Common\SQF\DebugLog.sqf"

funcVectorAdd = preprocessFile "Common\SQF\VectorAdd.sqf"
funcVectorSub = preprocessFile "Common\SQF\VectorSub.sqf"
funcVectorDot = preprocessFile "Common\SQF\VectorDot.sqf"
funcVectorCross = preprocessFile "Common\SQF\VectorCross.sqf"
funcVectorScale = preprocessFile "Common\SQF\VectorScale.sqf"
funcVectorLength = preprocessFile "Common\SQF\VectorLength.sqf"
funcVectorRot = preprocessFile "Common\SQF\VectorRot.sqf"
funcVectorRot3D = preprocessFile "Common\SQF\VectorRot3D.sqf"
funcRandomRotation3D = preprocessFile "Common\SQF\RandomRotation3D.sqf"

funcDistH = preprocessFile "Common\SQF\DistH.sqf"
funcHASL = preprocessFile "Common\SQF\HASL.sqf"
funcAreaFlat = preprocessFile "Common\SQF\AreaFlat.sqf"
funcInForest = preprocessFile "Common\SQF\InForest.sqf"
funcPosNearSea = preprocessFile "Common\SQF\PosNearSea.sqf"
funcBaseArea = preprocessFile "Common\SQF\BaseArea.sqf"
funcStartPos = preprocessFile "Common\SQF\StartPos.sqf"

fAddSoldier = preprocessFile "Common\SQF\AddSoldier.sqf"
fAddVehicle = preprocessFile "Common\SQF\AddVehicle.sqf"

funcCalcDistanceToObject = {[_this select 0, getPos (_this select 1)] call funcDistH}
funcCalcUnitPlacementPosDir = preprocessFile "Common\SQF\CalcUnitPlacementPosDir.sqf"
funcCountUnits = preprocessFile "Common\SQF\CountUnits.sqf"
funcGetCargoNum = "count (crew _this - [driver _this, gunner _this, commander _this])"
funcGetTranspVol = "call (typeOf _this GetVehicleParam {transportSoldier})"

funcGetClosestTown = preprocessFile "Common\SQF\GetClosestTown.sqf"
funcGetClosestEnemyTown = preprocessFile "Common\SQF\GetClosestEnemyTown.sqf"

funcGetStructures = preprocessFile "Common\SQF\GetStructures.sqf"
funcGetClosestStructure = preprocessFile "Common\SQF\GetClosestStructure.sqf"
funcGetClosestEnemyObject = preprocessFile "Common\SQF\GetClosestEnemyObject.sqf"
funcGetNearestStructure = preprocessFile "Common\SQF\GetNearestStructure.sqf"
funcGetNearbyStructure = preprocessFile "Common\SQF\GetNearbyStructure.sqf"

funcGetNearbyVehicles = preprocessFile "Common\SQF\GetNearbyVehicles.sqf"
funcGetNearbyVehiclesBySide = preprocessFile "Common\SQF\GetNearbyVehiclesBySide.sqf"
funcGetClosestVehicle = preprocessFile "Common\SQF\GetClosestVehicle.sqf"
funcGetClosestVehicleEmpty = preprocessFile "Common\SQF\GetClosestVehicleEmpty.sqf"

funcGetWorkingStructures = preprocessFile "Common\SQF\GetWorkingStructures.sqf"
funcGetNearestRespawnObject = preprocessFile "Common\SQF\GetNearestRespawnObject.sqf"

funcGetClosestUnit = preprocessFile "Common\SQF\GetClosestUnit.sqf"
funcGetNearbySoldiers = preprocessFile "Common\SQF\GetNearbySoldiers.sqf"

funcGetRearmData = preprocessFile "Common\SQF\GetRearmData.sqf"
funcGetStructTypeFromObject = preprocessFile "Common\SQF\GetStructTypeFromObject.sqf"
funcGetUnitTypeFromObject = preprocessFile "Common\SQF\GetUnitTypeFromObject.sqf"

exit

funcArrayOverlap = "count (_this select 1) > count ( (_this select 1) - (_this select 0) )"
funcBinaryDigit = preprocessFile "Common\SQF\BinaryDigit.sqf"
funcBoolEqual = "(_this select 0) && (_this select 1) || !(_this select 0) && !(_this select 1)"
funcGetAIGroupsIndex = {private ["_si", "_groups", "_gis", "_index", "_x", "_groupsAI"];_si = _this select 0;_groups = groupMatrix select _si;_groupsAI = groupAiMatrix select _si;_index = 0;_gis = [];{if (_x in _groupsAI) then{_gis set [count _gis, _index]};_index = _index + 1;} foreach _groups;_gis}

funcDistH = "sqrt( ( ((_this select 0) select 0) - ((_this select 1) select 0) )^2 + ( ((_this select 0) select 1) - ((_this select 1) select 1) )^2 )"
funcGetRandomPos = {private ["_dir", "_dist", "_pos"];_dir = random 360;_dist = (_this select 1) + random ((_this select 2) - (_this select 1));_pos = +(_this select 0);_pos set [0, ((_this select 0) select 0) + _dist*(sin _dir)];_pos set [1, ((_this select 0) select 1) + _dist*(cos _dir)];_pos}
funcGetRandomUnitType = {private ["_type", "_try", "_entry"];_type = -1;_try = 0;while "_type == -1 && _try < 3" do{_entry = _this select ((random (count _this)) - 0.5); if ((random 1) < (_entry select 1)) then {_type = _entry select 0;};_try = _try + 1;};_type}
funcSort = preprocessFile "Common\SQF\Sort.sqf"
funcUpdateAttaching = {_tug = _this select 0;_vehicle = _this select 1;_attachDist = _this select 2;_attachDir = _this select 3;_coefScale = _this select 4;_coefHeight = _this select 5;_bHeli = _this select 6;_tugDir = getDir _tug;_vehDir = getDir _vehicle;_dirDiff = _vehDir - _tugDir;if (_dirDiff > 180) then {_dirDiff = _dirDiff - 360};if (_dirDiff < -180) then {_dirDiff = _dirDiff + 360};if (_dirDiff > 5) then {_vehicle setDir (-1 + _vehDir)};if (_dirDiff < -5) then {_vehicle setDir (1 + _vehDir)};_tugPos = getPos _tug;_posAttach = [(_tugPos select 0) + _attachDist*sin(_tugDir+_attachDir), (_tugPos select 1) + _attachDist*cos(_tugDir+_attachDir), 0];if _bHeli then {_posAttach = [_tugPos select 0, _tugPos select 1, (_tugPos select 2) - _attachDist]};_vehPos = getPos _vehicle;_vDisp = [_posAttach, _vehPos] call funcVectorSub;_vDispLength = [_vDisp select 0, _vDisp select 1] call funcVectorLength;if (_vDispLength > 100) then {_vDisp set [0, (_vDisp select 0)*100/_vDispLength]; _vDisp set [1, (_vDisp select 1)*100/_vDispLength]};_alt = _vehPos select 2;_vVelAdd = [(_vDisp select 0)/5, (_vDisp select 1)/5, _coefHeight*(2 - _alt)];if _bHeli then {_vVelAdd = [_vVelAdd, 1/2] call funcVectorScale; _vVelAdd set [2, (_vDisp select 2)/10]};([[velocity _tug, _coefScale] call funcVectorScale, _vVelAdd] call funcVectorAdd)}
fDebugLog = preprocessFile "Common\SQF\DebugLog.sqf"

funcVectorAdd = {private ["_res"];_res = [((_this select 0) select 0)+((_this select 1) select 0), ((_this select 0) select 1)+((_this select 1) select 1)];if (count (_this select 0) == 3) then { _res set [2, ((_this select 0) select 2)+((_this select 1) select 2)] };_res}
funcVectorSub = {private ["_res"];_res = [((_this select 0) select 0)-((_this select 1) select 0), ((_this select 0) select 1)-((_this select 1) select 1)];if (count (_this select 0) == 3) then { _res set [2, ((_this select 0) select 2)-((_this select 1) select 2)] };_res}
funcVectorScale = {private ["_res"];_res = [((_this select 0) select 0)*(_this select 1), ((_this select 0) select 1)*(_this select 1)];if (count (_this select 0) == 3) then { _res set [2, ((_this select 0) select 2)*(_this select 1)] };_res}
funcVectorLength = {private ["_res"];_res = 0;if (count _this == 2) then { _res = sqrt( (_this select 0)*(_this select 0) + (_this select 1)*(_this select 1) ) };if (count _this == 3) then { _res = sqrt( (_this select 0)*(_this select 0) + (_this select 1)*(_this select 1)+ (_this select 2)*(_this select 2) ) };_res}
funcVectorDot = {private ["_res"];_res = ((_this select 0) select 0)*((_this select 1) select 0) + ((_this select 0) select 1)*((_this select 1) select 1);if (count (_this select 0) == 3) then {_res = _res + (_this select 0) select 2)*((_this select 1) select 2)};_res}
funcVectorCross = {private ["_x", "_y", "_z"];_x = ((_this select 0) select 1)*((_this select 1) select 2) - ((_this select 0) select 2)*((_this select 1) select 1);_y = ((_this select 0) select 2)*((_this select 1) select 0) - ((_this select 0) select 0)*((_this select 1) select 2);_z = ((_this select 0) select 0)*((_this select 1) select 1) - ((_this select 0) select 1)*((_this select 1) select 0);[_x,_y,_z]}
funcVectorRot = {[((_this select 0) select 0)*(cos(_this select 1)) + ((_this select 0) select 1)*(sin(_this select 1)), ((_this select 0) select 1)*(cos(_this select 1)) - ((_this select 0) select 0)*(sin(_this select 1))]}
funcVectorRot3D = preprocessFile "Common\VectorRot3D.sqf"
funcRandomRotation3D = preprocessFile "Common\RandomRotation3D.sqf"

funcHASL = {private ["_height", "_sensor"];_height = 0;_sensor = "EmptyDetector" camCreate _this;_sensor setPos [_this select 0, _this select 1, 0];_height = (getPos _sensor) select 2;deleteVehicle _sensor;abs(_height)}
funcAreaFlat = {private [ "_x", "_pos", "_radius", "_poses", "_v", "_res", "_zMin", "_zMax", "_z" ];_pos = [(_this select 0) select 0, (_this select 0) select 1];_radius = _this select 1;_poses = [_pos];{ _v = [[0,_radius], _x] call funcVectorRot; _poses set [count _poses, [_pos, _v] call funcVectorAdd ] } foreach [0, 45, 90, 135, 180, 225, 270, 315];_res = false;_zMin = 1000;_zMax = -1000;{_z = _x call funcHASL;if ( _z < _zMin ) then { _zMin = _z };if ( _z > _zMax ) then { _zMax = _z };} foreach _poses;if ( (_zMax - _zMin) < (_this select 2) ) then { _res = true };_res}
funcInForest = {private [ "_i", "_c", "_objects", "_dist", "_dir", "_pos", "_object" ];_i=0;_c = 0;_objects = [];while "_i < 100 && _c < 4" do{_dist = 30*(_i/100);_dir = _i*20;_pos = [ _this select 0, [_dist*(sin _dir), _dist*(cos _dir)] ] call funcVectorAdd;_object = nearestObject [_pos, ""];if (!(isNull _object)) then{if (((getPos _object) select 2) > 5) then{if (!(_object in _objects)) then{_objects set [count _objects, _object];_c = _c + 1;};};};_i=_i+1;};_c > 3}
funcPosNearSea = {private [ "_x", "_pos", "_dist", "_result", "_poses", "_v" ];_pos = [(_this select 0) select 0, (_this select 0) select 1];_dist = _this select 1;_result = false;if (_dist > 0) then{_poses = [_pos];{ _v = [[0,_dist], _x] call funcVectorRot; _poses set [count _poses, [_pos, _v] call funcVectorAdd ] } foreach [0, 45, 90, 135, 180, 225, 270, 315];{ if ((_x call funcHASL) < 5) then { _result = true } } foreach _poses;}else{_result = ((_pos call funcHASL) < 5);};_result}
funcBaseArea = {private [ "_x", "_pos", "_dist", "_poses", "_v", "_res", "_forest" ];_pos = [(_this select 0) select 0, (_this select 0) select 1];_poses = [_pos];_dist = 50;{ _v = [[0,_dist], _x] call funcVectorRot; _poses set [count _poses, [_pos, _v] call funcVectorAdd ] } foreach [0, 45, 90, 135, 180, 225, 270, 315];_res = false;if ( (([_pos, [siRes], []] call funcGetClosestTown) select 1) > 500 ) then{if ( !([_pos, 200] call funcPosNearSea)) then { if ( ([_pos, 50, 10] call funcAreaFlat) ) then {_forest = false;{if ( ([_x] call funcInForest) ) then{_forest = true;};} foreach _poses;if (!_forest) then {_res = true;};};};};_res}
funcStartPos = {private ["_res"];_res = false;if ( (([_this select 0, [siRes], []] call funcGetClosestTown) select 1) > 500 ) then{ if ( !([_this select 0, 50] call funcPosNearSea) ) then { if ( !([_this select 0] call funcInForest) ) then { if ( ([_this select 0, 50, 10] call funcAreaFlat) ) then{ _res = true; }; }; };};_res}

fAddSoldier = preprocessFile "Common\AddSoldier.sqf"
fAddVehicle = preprocessFile "Common\AddVehicle.sqf"

funcCalcDistanceToObject = preprocessFile "Common\SQF\CalcDistanceToObject.sqf"
funcCalcUnitPlacementPosDir = preprocessFile "Common\SQF\CalcUnitPlacementPosDir.sqf"
funcCountUnits = preprocessFile "Common\SQF\CountUnits.sqf"

funcGetClosestTown = {private ["_x", "_minDistance", "_closestTown", "_pos", "_distance", "_indexTown", "_index"];_minDistance = 100000;_closestTown = [];_indexTown = -1;_index = 0;{_pos = getPos (_x select 0);_distance = sqrt( ((_pos Select 0) - ((_this select 0) select 0))^2 + ((_pos Select 1) - ((_this select 0) select 1))^2 );if ( _distance < _minDistance && (_x select tdSide) in (_this select 1) && !(_index in (_this select 2)) ) then { _closestTown = _x; _minDistance = _distance; _indexTown = _index };_index = _index + 1;} forEach towns;[_closestTown, _minDistance, _indexTown]}
funcGetClosestEnemyTown = {private ["_x", "_distMin", "_tiNear", "_pos", "_dist", "_ti"];_distMin = 100000;_tiNear = -1;_ti = 0;{_pos = getPos (_x select tdFlag);if ( !(_ti in (_this select 2)) && (_this select 1) != (_x select tdSide) ) then {_dist = [_pos, _this select 0] call funcDistH;if ( _dist < _distMin ) then{_tiNear = _ti;_distMin = _dist;};};_ti = _ti + 1;} forEach towns;[_tiNear, _distMin]}

funcGetStructures = preprocessFile "Common\SQF\GetStructures.sqf"
funcGetClosestStructure = {private ["_x", "_struct", "_distMin", "_structs", "_dist"];_struct = objNull;_distMin = 100000;_structs = (structMatrix select (_this select 1)) select (_this select 2);_structs = _structs - [objNull];{if ( !(isNull _x) && (alive _x) ) then{_dist = [_this select 0, _x] call funcCalcDistanceToObject;if (_distMin > _dist) then{_struct = _x;_distMin = _dist;};};} foreach _structs;[_struct, _distMin]}
funcGetClosestEnemyObject = {private ["_x", "_object", "_distMin", "_siEnemy", "_objects", "_dist"];_object = objNull;_distMin = 100000;_siEnemy = siEnemy select (_this select 1);_objects = [mhq select _siEnemy];_objects = _objects + (MCV select _siEnemy);{ _objects = _objects + ((structMatrix select _siEnemy) select _x) } foreach structsDestroy;_objects = _objects - [objNull];{if ( alive _x && !(isNull _x) ) then{_dist = [_this select 0, _x] call funcCalcDistanceToObject;if (_distMin > _dist) then{_object = _x;_distMin = _dist;};};} foreach _objects;[_object, _distMin]}
funcGetNearestStructure = preprocessFile "Common\SQF\GetNearestStructure.sqf"
funcGetNearbyStructure = preprocessFile "Common\SQF\GetNearbyStructure.sqf"

funcGetNearbyVehicles = {private ["_x", "_posOrigin", "_distMax", "_types", "_pos", "_except", "_vehicles", "_type", "_count", "_distance"];_posOrigin = _this select 0;_distMax = _this select 1;_types = _this select 2;_except = _this select 3;_vehicles = [];_type = 0;_count = count unitDefs;while "_type < _count" do{if (((count _types == 0) || (_type in _types)) && (count ((unitDefs select _type) select udCrew) > 0)) then{{_pos = getPos _x;_distance = sqrt ( ((_pos select 0) - (_posOrigin select 0))^2 + ((_pos select 1) - (_posOrigin select 1))^2 );if (!(_x in _except) && alive _x && _distance < _distMax) then{_vehicles set [count _vehicles, [_x, _type, _distance]];}} foreach ((unitMatrix select si0) select _type);{_pos = getPos _x;_distance = sqrt ( ((_pos select 0) - (_posOrigin select 0))^2 + ((_pos select 1) - (_posOrigin select 1))^2 );if (!(_x in _except) && alive _x && _distance < _distMax) then{_vehicles set [count _vehicles, [_x, _type, _distance]];}} foreach ((unitMatrix select si1) select _type);{_pos = getPos _x;_distance = sqrt ( ((_pos select 0) - (_posOrigin select 0))^2 + ((_pos select 1) - (_posOrigin select 1))^2 );if (!(_x in _except) && alive _x && _distance < _distMax) then{_vehicles set [count _vehicles, [_x, _type, _distance]];}} foreach ((unitMatrix select siRes) select _type);};_type = _type + 1;};_vehicles}
funcGetNearbyVehiclesBySide = preprocessFile "Common\GetNearbyVehiclesBySide.sqf"
funcGetClosestVehicle = {private ["_x", "_pos", "_si", "_types", "_except", "_vehicleFound", "_dist", "_distFound", "_type", "_count"];_pos = _this select 0;_si = _this select 1;_types = _this select 2;_except = _this select 3;_vehicleFound = objNull;_distFound = 10000;_type = 0;_count = count unitDefs;while "_type < _count" do{if (((count _types == 0) || (_type in _types)) && (count ((unitDefs select _type) select udCrew) > 0)) then{if (_si == si0 || _si == siBoth) then {{if (!(_x in _except) && alive _x) then{_dist = ([_pos, getPos _x] call funcDistH);if (_dist < _distFound) then{_vehicleFound = _x;_distFound = _dist;};};} foreach ((unitMatrix select si0) select _type);};if (_si == si1 || _si == siBoth) then {{if (!(_x in _except) && alive _x) then{_dist = ([_pos, getPos _x] call funcDistH);if (_dist < _distFound) then{_vehicleFound = _x;_distFound = _dist;};};} foreach ((unitMatrix select si1) select _type);};if (_si == siRes || _si == siBoth) then {{if (!(_x in _except) && alive _x) then{_dist = ([_pos, getPos _x] call funcDistH);if (_dist < _distFound) then{_vehicleFound = _x;_distFound = _dist;};};} foreach ((unitMatrix select siRes) select _type);};};_type = _type + 1;};[_vehicleFound, _distFound]}
funcGetClosestVehicleEmpty = preprocessFile "Common\GetClosestVehicleEmpty.sqf"

funcGetWorkingStructures = {private ["_x", "_res", "_structs"];_res = [];if ( (_this select 1) < 0 ) then {format ["structType is %1 in funcGetWorkingStructures", (_this select 1)] call fDebugLog};_structs = (structMatrix select (_this select 0)) select (_this select 1);_structs = _structs - [objNull];{if (!(isNull _x) && (alive _x)) then{_res = _res + [_x]};} foreach _structs;_res}
funcGetNearestRespawnObject = {private ["_x", "_objOld", "_si", "_distMin", "_structs", "_obj", "_mhq", "_ts"];_objOld = _this select 0;_si = _this select 1;_obj = objNull;_distMin = 100000;_mhq = (mhq select _si);if (isNull _objOld) then { _objOld = _mhq };if (alive _mhq) then{_obj = _mhq;_distMin = _objOld distance _mhq;};_MCVs = MCV select _si;if ( ("alive _x " count _MCVs) > 0 ) then{{if ( (_objOld distance _x) < _distMin && alive _x ) then{_obj = _x;_distMin = _objOld distance _x;};} foreach _MCVs;};{_ts = _x;_structs = [_si, _ts] call funcGetWorkingStructures;{if ( (_objOld distance _x) < _distMin ) then{_obj = _x;_distMin = _objOld distance _x;};} foreach _structs;} foreach structsRespawn;_obj}

funcGetClosestUnit = preprocessFile "Common\GetClosestUnit.sqf"
funcGetNearbySoldiers = preprocessFile "Common\GetNearbySoldiers.sqf"

funcGetRearmData = {private [ "_return", "_i" ];_return = [ [], [] ];_i = rearmDataObj find _this;if (_i != -1) then {_return set [0, (rearmDataEquip select _i) select 0]; _return set [1, (rearmDataEquip select _i) select 1]};_return}
funcGetStructTypeFromObject = preprocessFile "Common\SQF\GetStructTypeFromObject.sqf"
funcGetUnitTypeFromObject = preprocessFile "Common\SQF\GetUnitTypeFromObject.sqf"