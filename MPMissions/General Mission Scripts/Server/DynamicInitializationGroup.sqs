; args: none
; Town and Worker Groups are displayed on map, thus they're defined in mission.sqm, not created in-game and broadcasted.
; Temporary group and join group should be global, and are placed in mission.sqm as well.
; Res town groups and patrol groups can be created by the server. So do AA groups.
; Pre-defined west/east town groups should be attached to flagCarriers. Redundant groups should be deleted and insufficient groups should be created, and those created group remain NOT broadcasted.
; For broadcasting, publicExec or "Init" parameter of "createUnit" is available.


; =================================Patrol Groups=================================
_count = (count towns) / 2.5; _index = 0
; Set number of patrol group at about 40% of town numbers.

#ResPatrolGroups
_patrolGroup = createGroup resistance
[_patrolGroup] exec "Server\UpdateResPatrolGroup.sqs"

_index = _index + 1
? _index < _count : goto "ResPatrolGroups"


; ===============================Functional Groups===============================

_groupAA0=createGroup west; _groupAA1=createGroup east
[_groupAA0] exec {Server\UpdateAASystem.sqs}
[_groupAA1] exec {Server\UpdateAASystem.sqs};


; ==================================Town Groups==================================
; Groups are recorded in init.sqs thus have to wait unitl game started. 
; Number of town groups should rely on number of towns.

~2

_index = 0; _count = count towns; _westTG = grpNull; _eastTG = grpNull
#TownGroups
	_town = towns select _index; _flag = _town select 0; _income = _town select 2
	
	if (_index < count (townGroups select si0)) then {_westTG = (townGroups select si0) select _index} else {_westTG = createGroup west}
	if (_index < count (townGroups select si1)) then {_eastTG = (townGroups select si1) select _index} else {_eastTG = createGroup east}
	_resTG = createGroup resistance
	
	; An empty group created by "createGroup" return the "unknown" side. However editor can still use "format" and "substr" to gain the first 4 letters and hence gain the side.

	_script = "{Server\UpdateTownGroup.sqs}"
	? _income < 0 : _script = "{Server\UpdateTownGroup3.sqs}"
	call format ["[_westTG, _index, west] exec %1; [_eastTG, _index, east] exec %1", _script]

	_script = "{Server\UpdateTownGroupRes.sqs}"
	; ? _income >= 1000 : _script = "{Server\UpdateTownGroupRes2.sqs}"
	call format ["[_resTG, _index] exec %1", _script]

	_index = _index + 1
	? _index < _count : goto "TownGroups"
	
; Towns is the list including flagCarrier, Name, income, etc
; Ask each town use groups as their own TG. Index used as town index in scripts.
; It is possbile to ask TG execute special script depending on their income. NT mission can in this way considering design a parameter to switch NT mode ON/OFF.

_indexExtra = 0
#ExtraTownGroups
	_town = towns select _indexExtra; _flag = _town select 0; _income = _town select 2
	
	? _income < 1000 : goto "SkipExtraTownGroups"
	if (_index < count (townGroups select si0)) then {_westTG = (townGroups select si0) select _index} else {_westTG = createGroup west}
	if (_index < count (townGroups select si1)) then {_eastTG = (townGroups select si1) select _index} else {_eastTG = createGroup east}
	
	_script = "{Server\UpdateTownGroup4.sqs}"
	call format ["[_westTG, _index, west] exec %1", _script]; call format ["[_eastTG, _index, east] exec %1", _script]
	_index = _index + 1

	#SkipExtraTownGroups
	_indexExtra = _indexExtra + 1
	? _indexExtra < _count : goto "ExtraTownGroups"
	
_indexRemoveTG = _index

; =============================Clean up Leaders and Groups============================
~2
{deleteVehicle (units _x select 0)} forEach (workerGroups select 0)
{deleteVehicle (units _x select 0)} forEach (workerGroups select 1)

_index = _indexRemoveTG
while "_index < count (townGroups select si0)" do { {deleteVehicle _x} forEach units ((townGroups select si0) select _index); _index = _index + 1 }
_index = _indexRemoveTG
while "_index < count (townGroups select si1)" do { {deleteVehicle _x} forEach units ((townGroups select si1) select _index); _index = _index + 1 }
~2
_index = _indexRemoveTG
while "_index < count (townGroups select si0)" do { deleteGroup ((townGroups select si0) select _index); _index = _index + 1 }
_index = _indexRemoveTG
while "_index < count (townGroups select si1)" do { deleteGroup ((townGroups select si1) select _index); _index = _index + 1 }


;EOF