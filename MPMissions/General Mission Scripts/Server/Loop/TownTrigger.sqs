; args: [_trigger, _lastSetSide, _lastSide]

_trigger = _this select 0; _lastSetSide = _this select 1; _lastSide = _this select 2

_pos = getPos _trigger
_res = [_pos, [si0,si1,siRes], []] call funcGetClosestTown
_indexTown = _res select 2

#Update
? _time > 3*60: [_trigger, _lastSetSide, _lastSide] exec {Server\Loop\TownTrigger.sqs}; exit
	~3
	_timeCheck = time + 19 - (time%20)
	@ (time > _timeCheck)

	_res = (list _trigger) call funcUpdateTownCheckUnits
	_units = _res select 0
	_groups = _res select 1

	_si = -1
	? ((_units select siRes) > (_units select si0)) && ((_units select siRes) > (_units select si1)): _si = siRes
	? ((_units select si0) > (_units select si1)) && ((_units select si0) > (_units select siRes)): _si = si0
	? ((_units select si1) > (_units select si0)) && ((_units select si1) > (_units select siRes)): _si = si1

	? _si >= 0 && _si == _lastSide && _si != _lastSetSide : goto "SetTownSide"

	_lastSide = _si

	goto "Update"

#SetTownSide

	? (pvGameOver != -1): Exit

	[_indexTown, _si, _lastSetSide] exec "Server\SendTownSideChange.sqs"

	_lastSetSide = _si
	_lastSide = _si

	? _si == siRes : goto "SkipScore"
  
		; calc score
		_score = ((towns select _indexTown) select tdValue)*0.05
		_score = _score/(count (_groups select _si))
		_score = _score - (_score % 1)
		? _score < 1 : _score = 1

		{ _gi = ( groupMatrix select _si ) find ( _x ); if (_gi != -1) then { [_score, scTown, _si, _gi] exec "Common\SendScore.sqs" } } foreach (_groups select _si)
  
	#SkipScore
	goto "Update"
