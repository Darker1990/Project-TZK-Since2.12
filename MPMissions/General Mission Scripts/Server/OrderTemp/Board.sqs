; args: [unit, si, gi, [wp, transport types (defined by BoardTypeDefs), board radius, duration]]

_unit = _this select 0
_si = _this select 1
_gi = _this select 2
_params = _this select 3

; Get Correct Parameters. Need Pay Attention To Coefficients
_posBoard = ((wpCO select _si) select (_params select 0))
_indexBoard = (_params select 1)
_radius = 50*((_params select 2) + 1)
_duration = 30 * ((_params select 3) + 1)

; Check Whether Unit Fits The Parameters Of The Temporary Order
? _unit != vehicle _unit : exit

; Check Whether Unit In Another Temporary Order (Except For Set Flight Altitude, Clear Temporary Order, Etc)
? _unit call temporaryCheck : exit

; Initialize The Order Script
_timeStart = time; _timeAbort = _timeStart + _duration; _timeUp = _timeStart; _cycle = 30; _loop = 0
_unit call temporarySet


; Wait For Unit Finish Its Busy-Work
#WaitReady
~5
? time > _timeAbort : 	_unit call temporaryClear; exit
? !_unit call temporaryCheck : exit
? _unit call busyCheck : goto "WaitReady"

; Main Part Of Temporary Order

; Use busy to prevent AI from automatically moving for support in Temporary Board Order
_unit call busySet

_typesBoard = [];

? (BoardTypeDefs select _indexBoard) == "Car" :		_typesBoard = [TransportCarW, TransportCarE] select _si;
? (BoardTypeDefs select _indexBoard) == "Truck" :	_typesBoard = [TransportTruckW, TransportTruckE] select _si;
? (BoardTypeDefs select _indexBoard) == "Zodiac" :	_typesBoard = [TransportZodiacW, TransportZodiacE] select _si;
? (BoardTypeDefs select _indexBoard) == "Ship" :	_typesBoard = [TransportShipW, TransportShipE] select _si;
? (BoardTypeDefs select _indexBoard) == "APC" : 	_typesBoard = [Transport6APCW+Transport8APCW, Transport6APCE+Transport8APCE] select _si;
? (BoardTypeDefs select _indexBoard) == "RepairTruck" : _typesBoard = [TransportRepairTruckW, TransportRepairTruckE] select _si;
? (BoardTypeDefs select _indexBoard) == "SupportAPC" : 	_typesBoard = [TransportSupAPCW, TransportSupAPCE] select _si;
? (BoardTypeDefs select _indexBoard) == "Heli" :	_typesBoard = [TransportHeliW+TransportSmallHeliW+TransportTigerW, TransportHeliE+TransportSmallHeliE+TransportHindE] select _si;
? (BoardTypeDefs select _indexBoard) == "Plane" :	_typesBoard = [TransportPlaneW, TransportPlaneE] select _si;

_groups = groupMatrix select _si
#Update
	_gi = ( _groups ) find ( (group _unit) )
	_vehicle = vehicle _unit
	? _unit != _vehicle : goto "EOF"

	[ _unit, ([_posBoard, _radius/2, _radius/2] call funcGetRandomPos) ] call funcMoveStand
	_res = [_posBoard, _radius] call funcGetNearbyTransports
	? count _res == 0 : goto "Sleep"

	_transports = []; _transp = objNull; _i = 0; _c = count _res
	#SetTransp
		? _i >= _c : goto "TranspSet"
		_transp = (_res select _i) select 0; _vt = (_transp call funcGetUnitTypeFromObject); _i = _i + 1
		? !(_vt in _typesBoard) : 	goto "SetTransp"
		? (isNull driver _transp) : 			goto "SetTransp"
		? (damage _transp) > 0.5 || ((getPos _transp) select 2) > 5 || (speed _transp) > 1 : 		goto "SetTransp"
		? _transp call funcGetCargoNum >= (_transp call funcGetTranspVol) : goto "SetTransp"
		_transports set [count _transports, _transp]; goto "SetTransp"

	#TranspSet
	? count _transports == 0 : goto "Sleep"

	_transp = _transports select (random (count _transports) - 0.5)
	_unit doWatch _transp
	? (_unit distance _transp) < 10 : goto "Reached"

	_offset = 0
	_timeMoveAbort = time + 5*60
	#Move_Check
		? _transp call funcGetCargoNum >= (_transp call funcGetTranspVol) : goto "Fail"
		_offset = _offset + 10
		_vect = [getPos _unit, getPos _transp] call funcVectorSub
		_dist = _unit distance _transp
		? _dist < 0.1 : _dist = _dist + 1
		_posMove = [getPos _transp, [_vect, _offset/_dist] call funcVectorScale] call funcVectorAdd
		_posMove set [2,0]
		[_unit, _posMove] call funcMoveStand

		_timeUp = time + _dist*0.2
		@ ( time > _timeUp || !_unit call temporaryCheck )
		? !_unit call temporaryCheck : goto "EOF"
		? !(alive _unit) || _vehicle != (vehicle _unit) || time > _timeAbort : goto "EOF"

		? time > _timeMoveAbort || _offset >= 50 || !(alive _transp) : goto "Fail"
		? (_unit distance _transp) > 50 : goto "Move_Check"

	#Reached
	_unit playMove "CombatGetInTank"
	~1
	? !alive _unit || !_unit call temporaryCheck: goto "EOF"
	_unit assignAsCargo _transp
	_unit moveInCargo _transp
	~1
	? !(alive _unit) || _transp != vehicle _unit : goto "Fail"

	#BoardSucceed
	;	_unit call busySet
		_timeBoardAbort = time + 10*60
		#WaitInCargo_Check
		~5
		? !(alive _unit) || !(alive _transp) : goto "Quit"
		? time > _timeBoardAbort && (speed _transp) < 2 && ((getPos _transp) select 2) < 2 : goto "GetOut"
		? _transp == (vehicle _unit) : goto "WaitInCargo_Check"
		goto "Quit"

	#GetOut
		unassignVehicle _unit
		_unit action ["eject", _transp]
		  #WaitOut
			~5
			? !(alive _unit) || !(alive _transp) : goto "Quit"
			? _unit != (vehicle _unit) : goto "WaitOut"
		goto "Quit"


	#Fail
	? !(alive _unit) : exit
	unassignVehicle _unit
	[_unit, ([_posBoard, 50, 50] call funcGetRandomPos)] call funcMoveStand
	goto "Update"



; End Of File
#EOF
_unit call busyClear
_unit call temporaryClear
exit


#Sleep
_loop = (time-_timeStart)/_cycle; _loop = 1 + _loop - _loop%1
_timeUp = _loop*_cycle + _timeStart

@ ( time > _timeUp || !_unit call temporaryCheck )
? !_unit call temporaryCheck : goto "EOF"
? !(alive _unit) || _vehicle != (vehicle _unit) || time > _timeAbort : goto "EOF"
goto "Update"

#Quit
unassignVehicle _unit
? ([getPos _unit, _posMove] call funcDistH) < 50 && _unit call temporaryCheck && time < _timeAbort : goto "Sleep"
goto "EOF"