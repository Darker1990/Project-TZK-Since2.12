; args: [_unit, _si, _gi, _attackPos, _radius, _target, _dispersion, _vt]

_unit = _this select 0; _si = _this select 1; _gi = _this select 2
_attackPos = _this select 3; _radius = _this select 4
_target = _this select 5; _dispersion = _this select 6
_type = _this select 7

_vehicle = vehicle _unit; _typeName = typeOf _vehicle; _actualTarget = typeOf _target camCreate getPosASL _target; _actualTarget exec {Common\Command\allowDamageFalse.sqs}
#CheckDistance
_distLimit = viewDistance; 
? (upgMatrix select _si) select upgLongWeaponRange == 2: _distLimit = 2*viewDistance; 
? _typeName in ["M1A1_Art_xj400", "T80_Art_xj400"]: _distLimit = 10000; 

#PrepareToMove
if (_attackPos select 0 < 0) then {_attackPos = getPos _vehicle} else {_attackPos = [_attackPos, _radius/3, _radius] call funcGetRandomPos; _attackPos set [2,0]}
? [_attackPos, getPos _target] call funcDistH > _distLimit: _vec = [getPos _target, _attackPos] call funcVectorSub; _len = _vec call funcVectorLength; _attackPos = [_attackPos, [_vec, 1 - 0.9*_distLimit/_len] call funcVectorScale] call funcVectorAdd
? ([getPos _unit, _attackPos] call funcDistH) < 30: goto "PrePareToAttack"
	? _typeName in ["TOS1_TZK_xj400", "M109A6G_xj400", "PLZ05_TZK_xj400"] && fuel _vehicle == 0: [_vehicle, 0] exec {Player\Effect\DeployChange.sqs}
#CheckPosReached
	_unit doMove _attackPos
	~5
	? !(_unit call temporaryCheck): goto "EOF"
	? !(alive _unit) || _vehicle != vehicle _unit: goto "EOF"
	? ([getPos _unit, _attackPos] call funcDistH) > 30: goto "CheckPosReached"
#PrePareToAttack
	[_unit, true] exec "Server\StopAI.sqs"
	driver _vehicle action ["ENGINE OFF", _vehicle]; _vehicle engineOn false
	_vehicle reveal _actualTarget
	_vehicle doTarget _actualTarget
	
	_weapon = (_vehicle call funcVehParamWeapons) select 0
	_delay = 3
	; Delay for turning the turret. It'll be good to obtain proper value by the angle's difference, however no way to compute this in OFP.
	? _typeName in ["TOS1_TZK_xj400", "M109A6G_xj400", "PLZ05_TZK_xj400"] && fuel _vehicle > 0: [_vehicle, 1] exec {Player\Effect\DeployChange.sqs}; _delay = 8
	~_delay
	
	? !(_vehicle hasWeapon _weapon): goto "EOF"
	_weapons = (weapons _vehicle) - [_weapon]; {_vehicle removeWeapon _x} forEach _weapons; {_vehicle addWeapon _x} forEach _weapons
	_reloadMagazine = false
	_ammunition = -1
	; The applying of "_ammunition" will invalid magazines containing only 1 shot. If wish to use such a magazine, adjust this script manually.
	#AttackCheck
		_posTarget = [getPos _target, 0, _dispersion] call funcGetRandomPos; _posTarget set [2,0]; _actualTarget setPos _posTarget
		? _unit distance _target > _distLimit: goto "CheckDistance"
		? bool_TZK_199_Mode: goto "Mode199"
		
		? _vehicle ammo _weapon == 0: _magazines = _vehicle call loadFile "Common\SQF\GetNotEmptyMags.sqf"; _validMags = [_weapon] call loadFile "Common\SQF\WeaponValidMags.sqf"; if ("_x in _validMags" count _magazines == 0) Then {goto "CheckRearm"};
		_vehicle reveal _actualTarget
		~0.1
		_vehicle doTarget _actualTarget
		
		; delay must be correctly assigned for "fire" command.
		_ammoArray = _vehicle ammoArray _weapon
		? count _ammoArray > 0: _delay = call format ["%1", (_ammoArray select 0) GetWeaponParam "reloadTime"]*1.2 + 1
		? count _ammoArray == 0: _validMags = [_weapon] call loadFile "Common\SQF\WeaponValidMags.sqf"; _delay = call format ["%1", (_validMags select 0) GetWeaponParam "reloadTime"] + 1
		
		? _reloadMagazine: _delay = call format ["%1", _weapon GetWeaponParam "magazineReloadTime"] + _delay; _reloadMagazine = false
		~_delay
		? !(_unit call temporaryCheck): goto "EOF"
		? !(alive _unit) || _vehicle != vehicle _unit: goto "EOF"
		_ammoArray = _vehicle ammoArray _weapon
		? count _ammoArray > 0 && local gunner _vehicle: if (_ammoArray select 1 == 1) Then {_reloadMagazine = true}; if (_ammoArray select 1 > 0) Then {if ((_ammoArray select 1 != _ammunition) || (_ammoArray select 1 == 1)) Then {_ammunition = _ammoArray select 1; _vehicle fire _weapon}} else {goto "EOF"}
		? count _ammoArray == 0: goto "EOF"
		goto "AttackDone"
		
		#Mode199
		
		? _vehicle ammo _weapon == 0: if !(someAmmo _vehicle) Then {goto "CheckRearm"};
		_vehicle reveal _actualTarget
		~0.1
		_vehicle doTarget _actualTarget
		
		; delay must be correctly assigned for "fire" command.
		_ammoOld = _vehicle ammo _weapon
		_delay = ( ([0,8] select (true) ) + ([0,0] select (true)) )*1.2 + 1
		~0.1
		? _reloadMagazine: _delay = ([0,5] select (true) ) + _delay; _reloadMagazine = false
		~_delay
		? !(_unit call temporaryCheck): goto "EOF"
		? !(alive _unit) || _vehicle != vehicle _unit: goto "EOF"
		_ammoNow = _vehicle ammo _weapon
		? _ammoNow > 0: if (_ammoNow == 1) Then {_reloadMagazine = true}; if (_ammoNow != _ammunition || _ammoNow == 1) Then {_ammunition = _ammoNow, _vehicle fire _weapon}
		? _ammoNow == 0: if (_ammoOld == 0) Then {goto "EOF"}
		
		#AttackDone
		~0.1
		_vehicle doWatch (getPos _actualTarget)
	goto "AttackCheck"
#CheckRearm
	_vs = [getPos _unit, 1500, (typesSupport select si0) + (typesSupport select si1), []] call funcGetNearbyVehicles
	? count _vs == 0: goto "EOF"
	_distMin = 1500; _sup = objNull
	{ _dist = _unit distance (_x select 0); if (_dist < _distMin) Then { _sup = (_x select 0); _distMin = _dist } } foreach _vs
	? isNull _sup: goto "EOF"

	_timeAbort = time + 5*60
	? _typeName in ["TOS1_TZK_xj400", "M109A6G_xj400", "PLZ05_TZK_xj400"] && fuel _vehicle == 0: [_vehicle, 0] exec {Player\Effect\DeployChange.sqs}
	#MoveToSupport
		_posMove = [[0,25], (getDir _sup)] call funcVectorRot
		_posMove = [getPos _sup, _posMove] call funcVectorSub
		_unit doMove _posMove
		~5
		? !(_unit call temporaryCheck): goto "EOF"
		? !(alive _unit) || _vehicle != vehicle _unit: goto "EOF"
		? !(alive _sup): goto "CheckRearm"
		? time > _timeAbort: goto "EOF"
		? (_unit distance _sup) > 30: goto "MoveToSupport"
	_gi = (groupMatrix select _si) find ( (group _unit) )
	_speed = -1; _mag = "";
	? !bool_TZK_199_Mode: _magazines = magazines _vehicle; _validMags = [_weapon] call loadFile "Common\SQF\WeaponValidMags.sqf"; {if (_x in _validMags) Then {_mag = _x}} forEach _magazines
	? _mag != "": _speed = substr [_mag, sizeofstr(_mag) - sizeofstr("xxxx_xj400"), sizeofstr(_mag) - sizeofstr("_xj400")]; if !(substr [_speed, 0, 1] in ["0","1","2","3"]) then {_speed = -1} else {_speed = call _speed};
	_delay = [0,3] select (_speed > 0)
	[_unit, _si, _gi, _vehicle, _type, _sup] exec "Server\AI_Rearm.sqs"; [_unit, true] exec "Server\StopAI.sqs"
	#WaitRearmComplete
		~5
		? !(_unit call temporaryCheck): goto "EOF"
		? !(alive _unit) || _vehicle != vehicle _unit: goto "EOF"
		? !someAmmo _vehicle: goto "WaitRearmComplete"
	~_delay + 1
	? _speed > 0: [_vehicle, _speed] exec {Common\ReEquip\SwitchMagPreset.sqs}
	goto "PrepareToMove"

; End Of File
#EOF
_unit call busyClear
_unit call temporaryClear
deleteVehicle _actualTarget
exit