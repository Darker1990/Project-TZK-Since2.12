; args: [group]

_group = _this select 0

_tanks = 1
_timePatrol = (60*(Random 60))
_Destr = (30*(Random 4))
_timeDestroy = (_Destr*60)

_si = siRes

? isNull _group : format["ERROR: _group is NULL for RES patrol group"] call fDebugLog; exit

@!(mutexInitResGroups)
mutexInitResGroups = true
_list = groupMatrix select _si
_list set [count _list, _group]

groupsPatrol set [count groupsPatrol, _group]
groupPatrolJoinMatrix set [count groupPatrolJoinMatrix, 0]
mutexInitResGroups = false

@( !(isNull (mhq select si0)) && !(isNull (mhq select si1)) )

_posStart = [] call funcUpdateResStartPos
   
~10
_posPatrol = _posStart

_i = 0
#InitAddTank
  _i = _i + 1
  ? _i > _tanks : goto "TanksAdded"
  _type = -1
  while "_type == -1" do { _type = (armorTown select _si) call funcGetRandomUnitType }
  _pos = [_posStart, 10, 20] call funcGetRandomPos
  [_type, 1, 1, 0, _pos, random 360, _si, -1, _group, 0, 0] exec "Common\AddUnit.sqs"
  ~1
  goto "InitAddTank"
#TanksAdded

_town = objNull

; Use mutexInitResGroups to let server only ask one patrol group move in a short time. Aiming to reduce server's workload.
#Update
	mutexInitResGroups = false
	  ~ 120
	@!(mutexInitResGroups)
	mutexInitResGroups = true

	? (count (units _group)) == 0 : goto "Update"

  _group setCombatMode "RED"; _group setBehaviour "COMBAT"; _group setSpeedMode "NORMAL"
  
  ; TODO { _x disableAI "TARGET" } foreach (units _group)

	? time < _timePatrol : goto "Patrol"
	? time > _timeDestroy : goto "Destroy"
	_res = [-1,0]
	{ if (_x == driver vehicle _x) then { _res = [getPos _x, siRes, []] call funcGetClosestEnemyTown; if ((_res select 0) != -1) then { _flag = (towns select (_res select 0)) select tdFlag; _x doMove ([getPos _flag,4, 4] call funcGetRandomPos) } } } forEach (units _group)
	
;	? (_res select 0) != -1 : goto "Update"
; Not allow go patrol if no enemy town.
	goto "Update"


#Patrol
	? time < ([60*10, 60*0] select dev): goto "Update"
	_posOld = _posPatrol
	_posPatrol = [_posOld] call funcUpdateResPatrolPos

	{ if (_x == driver vehicle _x) then { _x doMove ([_posPatrol, 10, 20] call funcGetRandomPos) } } foreach (units _group)
		; player globalchat Format ["UpdatePatrollingResTank.sqs: Patrol: _posPatrol=%1", _posPatrol]
;	[_group] call funcUpdateResPatrolTowns
		goto "Update"

#Destroy
;	[_group] call funcUpdateResPatrolDestroy
	_units = units _group; _count = count _units; _index = 0
	#DestroyUnits
	_unit = _units select _index

	_res1 = [getPos _unit, si0] call funcGetClosestEnemyObject;
	_res0 = [getPos _unit, si1] call funcGetClosestEnemyObject;
	_comparison = (_res0 select 1) < (_res1 select 1); _object = [_res1 select 0, _res0 select 0] select _comparison; _distance = [_res1 select 1, _res0 select 1] select _comparison

	_comparison = ( _distance < (1 + time/3600)*viewDistance )
	? _comparison : if (_unit == driver vehicle _unit) then { _unit doMove ([getPos _object, 50, 100] call funcGetRandomPos) }; if ( _unit != vehicle _unit && _unit == gunner vehicle _unit && (_unit distance _object) < 200) then { [_unit, _object] exec "Server\DestroyObject.sqs" };
	? !_comparison && _unit == driver vehicle _unit: _res0 = [getPos _unit, siRes, []] call funcGetClosestEnemyTown; if ((_res0 select 0) != -1) then { _flag = (towns select (_res0 select 0)) select tdFlag; _unit doMove ([getPos _flag, 4, 4] call funcGetRandomPos) };

	_index = _index + 1
	? _index < _count : goto "DestroyUnits"

	goto "Update"

; EOF