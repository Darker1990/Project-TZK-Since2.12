; args: [group]

_group = _this select 0

_tanks = 1
_timePatrol = (60*(Random 60))
_Destr = (30*(Random 4))
_timeDestroy = (_Destr*60)

_si = siRes

? isNull _group : format["ERROR: _group is NULL for RES patrol group"] call fDebugLog; exit

@!(mutexInitResGroups)
mutexInitResGroups = true
_list = groupMatrix select _si
_list set [count _list, _group]

groupsPatrol set [count groupsPatrol, _group]
groupPatrolJoinMatrix set [count groupPatrolJoinMatrix, 0]
mutexInitResGroups = false

@( !(isNull (mhq select si0)) && !(isNull (mhq select si1)) )

_posStart = [] call funcUpdateResStartPos
   
~10
_posPatrol = _posStart

_i = 0
#InitAddTank
  _i = _i + 1
  ? _i > _tanks : goto "TanksAdded"
  _type = -1
  while "_type == -1" do { _type = (armorTown select _si) call funcGetRandomUnitType }
  _pos = [_posStart, 10, 20] call funcGetRandomPos
  [_type, 1, 1, 0, _pos, random 360, _si, -1, _group, 0, 0] exec "Common\AddUnit.sqs"
  ~1
  goto "InitAddTank"
#TanksAdded
_tanks = nil

["mutexInitResGroups", 60] exec "Common\DeleteVariableAfterDelay.sqs"
#Update
	~ 120
	
	? (count (units _group)) == 0 : goto "Update"
	_group setCombatMode "RED"; _group setBehaviour "COMBAT"; _group setSpeedMode "NORMAL"

	? time < _timePatrol : goto "Patrol"
	? time > _timeDestroy : goto "Destroy"
	
; TakeTown
_units = units _group; _ci = count _units; _i = 0
#TakeTownCheckUnit
	? _i >= _ci: _units resize 0; goto "Update"
	_unit = _units select _i
	? _unit != driver vehicle _unit: _i = _i + 1; goto "TakeTownCheckUnit"
	_j = 0; _cj = count towns; _distance = 100000; _ti = -1
	#TakeTownCheckFlag
		_town = towns select _j
		? (_town select tdSide) != siRes: if (_unit distance (_town select tdFlag) < _distance) then {_ti = _j; _distance = _unit distance (_town select tdFlag)}
		_j = _j + 1
		? _j < _cj: goto "TakeTownCheckFlag"
	? _ti != -1: _unit doMove getPos ((towns select _ti) select tdFlag)
	
	_i = _i + 1
	goto "TakeTownCheckUnit"

#Patrol
	? time < ([60*10, 60*0] select dev): goto "Update"
	_posOld = _posPatrol
	_i = 0; _ci = 112; _found = false
	#PatrolPosTry
		_posPatrol = [posCenter, 0, 5000] call funcGetRandomPos
		? ([_posPatrol] call funcStartPos): _found = true
		_i = _i + 1
		~0.1
		? _i < _ci: goto "PatrolPosTry"
	? !_found: _posPatrol = _posOld
	
	{ if (_x == driver vehicle _x) then { _x doMove ([_posPatrol, 10, 20] call funcGetRandomPos) } } foreach (units _group)
	goto "Update"

#Destroy
_objects = +mhq + (MCV select si0) + (MCV select si1)
{ _objects = _objects + ((structMatrix select si0) select _x) } foreach structsDestroy
{ _objects = _objects + ((structMatrix select si1) select _x) } foreach structsDestroy
_objects = _objects - [objNull]

	_units = units _group; _ci = count _units; _i = 0; _takeTownUnits = []
	#DestroyUnits
	_unit = _units select _i
	
	_j = 0; _cj = count _objects; _distance = 100000; _ti = -1
	#DestroyCheckObj
		_obj = _objects select _j
		? _unit distance _obj < _distance: _ti = _j; _distance = _unit distance _obj
		_j = _j + 1
		? _j < _cj: goto "DestroyCheckObj"
	_comparison = ( _distance < (1 + time/3600)*viewDistance )
	? _comparison : if (_unit == driver vehicle _unit) then { _unit doMove ([getPos _object, 50, 100] call funcGetRandomPos) }; if ( _unit != vehicle _unit && _unit == gunner vehicle _unit && (_unit distance _object) < 200) then { [_unit, _object] exec "Server\DestroyObject.sqs" };
	? !_comparison && _unit == driver vehicle _unit: _takeTownUnits set [count _takeTownUnits, _unit]
	_i = _i + 1
	? _i < _ci : goto "DestroyUnits"
	
	? count _takeTownUnits > 0: _units = +_takeTownUnits; _ci = count _units; _i = 0; _objects resize 0; _takeTownUnits resize 0; goto "TakeTownCheckUnit"
	_objects resize 0; _takeTownUnits resize 0; _units resize 0; goto "Update"
	
; EOF