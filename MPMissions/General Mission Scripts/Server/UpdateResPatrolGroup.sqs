; args: [group]

_group = _this select 0

_tanks = 1
_timePatrol = (60*(Random 60))
_Destr = (30*(Random 4))
_timeDestroy = (_Destr*60)

_si = siRes

? isNull _group : format["ERROR: _group is NULL for RES patrol group"] call fDebugLog; exit

@!(mutexInitResGroups)
mutexInitResGroups = true
_list = groupMatrix select _si
_list set [count _list, _group]

groupsPatrol set [count groupsPatrol, _group]
groupPatrolJoinMatrix set [count groupPatrolJoinMatrix, 0]
mutexInitResGroups = false

@( !(isNull (mhq select si0)) && !(isNull (mhq select si1)) )

_posStart = [] call funcUpdateResStartPos
   
~10
_posPatrol = _posStart

_i = 0
#InitAddTank
  _i = _i + 1
  ? _i > _tanks : goto "TanksAdded"
  _type = -1
  while "_type == -1" do { _type = (armorTown select _si) call funcGetRandomUnitType }
  _pos = [_posStart, 10, 20] call funcGetRandomPos
  [_type, 1, 1, 0, _pos, random 360, _si, -1, _group, 0, 0] exec "Common\AddUnit.sqs"
  ~1
  goto "InitAddTank"
#TanksAdded
_tanks = nil

["mutexInitResGroups", 60] exec "Common\DeleteVariableAfterDelay.sqs"
#Update
	~ 120
	
	? (count (units _group)) == 0: goto "Update"
	_group setCombatMode "RED"; _group setBehaviour "COMBAT"; _group setSpeedMode "NORMAL"
	
	? time < _timePatrol : goto "Patrol"
	? time > _timeDestroy : goto "Destroy"
	
	; Take Town New Mode
	#TakeTownMode
	_res = [_posPatrol, siRes, []] call funcGetClosestEnemyTown;
	? (_res select 0) != -1: _flag = (towns select (_res select 0)) select tdFlag; _posPatrol = getPos _flag; {_x doMove ([_posPatrol,4,4] call funcGetRandomPos)} forEach (units _group)
	_posPatrol = getPos ((units _group) select 0)
	goto "Update"
	
; TakeTown
_units = units _group; _ci = count _units; _i = 0
#TakeTownCheckUnit
	? _i >= _ci: _units = nil; goto "Update"
	_unit = _units select _i
	? _unit != driver vehicle _unit: _i = _i + 1; goto "TakeTownCheckUnit"
	
	_res = [getPos _unit, siRes, []] call funcGetClosestEnemyTown;
	? (_res select 0) != -1: _flag = (towns select (_res select 0)) select tdFlag; _unit doMove ([getPos _flag,4, 4] call funcGetRandomPos)
	
	~2
	_i = _i + 1
	goto "TakeTownCheckUnit"
	

#Patrol
	? time < ([60*10, 60*0] select dev): goto "Update"
	_posPatrol = [_posPatrol, 100, 100] call funcGetRandomPos
;	_posOld = _posPatrol
;	_posPatrol = [_posOld] call funcUpdateResPatrolPos
	{ if (_x == driver vehicle _x) then { _x doMove ([_posPatrol, 10, 20] call funcGetRandomPos) } } foreach (units _group)
	goto "Update"

#Destroy

	_res1 = [_posPatrol, si0] call funcGetClosestEnemyObject;
	_res0 = [_posPatrol, si1] call funcGetClosestEnemyObject;
	_object = [_res1 select 0, _res0 select 0] select ((_res0 select 1) < (_res1 select 1));
	? (_res0 select 1) > (1 + time/3600)*viewDistance && (_res1 select 1) > (1 + time/3600)*viewDistance: goto "TakeTownMode"
	{	if (_x == driver vehicle _x) then { _x doMove ([getPos _object, 50, 100] call funcGetRandomPos) };	if ( _x != vehicle _x && _x == gunner vehicle _x && (_x distance _object) < 200) then { [_x, _object] exec "Server\DestroyObject.sqs" }	} forEach units _group
	_posPatrol = getPos _object
	goto "Update"
	
	

	_units = units _group; _ci = count _units; _i = 0; _takeTownUnits = []
	#DestroyUnits
	_unit = _units select _i
	
	#DestroyCheckObj
		_obj = (vehicle _unit) call loadFile "Server\SQF\ClosestStructure.sqf"; _dist = _unit distance _obj; _comparison = alive _obj && _dist < (1 + time/3600)*viewDistance
		? _comparison: if (_unit == driver vehicle _unit) then {_unit doMove ([getPos _obj, 50, 100] call funcGetRandomPos)}; if (_unit != vehicle _unit && _unit == gunner vehicle _unit && (_unit distance _obj) < 200) then {[_unit, _obj] exec "Server\DestroyObject.sqs"};
		? !_comparison && _unit == driver vehicle _unit: _takeTownUnits set [count _takeTownUnits, _unit]
		
		~2
		_i = _i + 1
		? _i < _ci : goto "DestroyUnits"
		
	? count _takeTownUnits > 0: _units = +_takeTownUnits; _ci = count _units; _i = 0; _takeTownUnits = nil; goto "TakeTownCheckUnit"
	_takeTownUnits = nil; _units = nil; goto "Update"
	
; EOF