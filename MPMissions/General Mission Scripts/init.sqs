; args : none

; Initialize the bool, make sure all of them not remain "undefined".
debug = true

_nil = "scalar bool array string 0xfcffffef"
{ if (format ["%1", call _x] == _nil) Then {call (_x + " = false")} } forEach ["dev", "boole_Infantry_Mode", "boole_NeutralTown_Mode", "boole_SEMod_Mode", "bool_TZK_Vanilla_Mode", "bool_TZK_199_Mode"]

; CONSTANTS
si0 = 0
si1 = 1
siRes = 2
siBoth = 3
siCiv = 4
siEnemy = [si1, si0]
sideNames = ["West", "East", "Resistance", "Both", "Civilian"]
groupName = ["WEST", "EAST", "GUER", "", "CIVL"]
sides = [west, east, resistance]
flags = ["\flags\USA.jpg", "\flags\CHINA.jpg", "\flags\FIA.jpg"]


siPlayer = -1
giPlayer = -1
groupPlayer = grpNull
mhq = [objNull, objNull, objNull, objNull, objNull]
MCV = [ [], [], [], [], [] ]
costWorker = 400
maxWorkers = [10, 10]
rangeSupport = 25; rangeSupportPlane = 30; rangeGetPlaneFlyingStatus = 150
sendDelay = 1.0
deleteUnitDelay = [3*60, 60] select dev
maxFlightAltitude = 800
maxFlightAltitudePlus = 700
costRepairMHQ = 30000
blockTime = 60
costRespawn = 0
factorRepairCost = 0.1
factorRepairTime = 0.02
distMaxCC = 200; distMaxCCUpgraded = 10000; CCdistMax = [distMaxCC, distMaxCC]
iInitNew = 99
bShowGroups = false
bShowInfo = false
bShowMap = false
SpoofMagazines = ["SpoofSwitch_xj400", "SpoofCount_xj400", "SpoofCount_xj400", "SpoofCount_xj400", "SpoofCount_xj400", "SpoofCount_xj400", "SpoofCount_xj400", "SpoofCount_xj400", "SpoofCount_xj400"]
positionAttach = [-1000, -1000, 100]; positionRespawn = [-1000, -1000, 10]

callsigns = ["Alpha", "Bravo", "Charlie", "Delta", "Echo", "Foxtrot", "Golf", "Hotel", "Kilo", "November", "Yankee", "Zulu", "Two", "Three", "Buffalo", "Guardian", "Convoy", "Fox" ]
GroupsNum = (count callsigns) + 2
giTown = GroupsNum - 2
giWorker = GroupsNum - 1
maxQ = 1000
TotalInfoTypes = 100
; these constants are used for calculating "value" in publicVariable operation.
; "TotalInfoTypes" could be defined in "InitInfoMsgTypes" as well.
; cautious: number in OFP is "Single" so it's necessary to make sure the value of "value" less than 15,000,000

grpSetting = "((aiSetting select _si) select _gi)"
Musics0=["Track1","Track2","Track3","Track4","Track5","Track6","Track7","Track8","Track9","Track11","Track12","Track15","Track16","Frost","RTrack1a","RTrack4","RTrack5","RTrack8","RTrack9","RTrack10"]
music0=0
Musics1h=["Track14","RTrack1b","RTrack3","RTrack6","RTrack7"]
music1h=0
Musics10m=["Track1","Track2","Track3","Track4","Track5","Track6","Track7","Track8","Track10","RTrack2"]
music10m=0

; game properties (see description.ext)

; ? ( (param1 % 20) < 10) : fixedStartPos = 1
; ? ( (param1 % 20) in [10,11,12,16,17]) : fixedStartPos = 2
; ? ( (param1 % 20) in [13,14,15,18,19]) : fixedStartPos = 3
fixedStartPos = param1

; ? ( (param1 % 20) in ([0,1,2,3,4] + [10,11,12,13,14,15]) ) : Incomex = 1
; ? ( (param1 % 20) in ([5,6,7,8,9] + [16,17,18,19]) ) : Incomex = 2
Incomex = 1

; ? ( (param1 % 20) in [0,5,10,13]) : restanksx = 1
; ? ( (param1 % 20) in [1,6,16,18]) : restanksx = 2
; ? ( (param1 % 20) in [2,7,11,14]) : restanksx = 3
; ? ( (param1 % 20) in [3,8,17,19]) : restanksx = 4
; ? ( (param1 % 20) in [4,9,12,15]) : restanksx = 5
restanksx = param2 + 1

; timeLimit = ( [4,6,3,0] select ( (param1 - param1 % 20)/20 ) )*60*60
timeLimit = 4*60*60
maxGroupSize = 12
; WeatherChosen = (param2 % 100) % 8
WeatherChosen = 0
; ZeroTime = ( (param2 % 100) - WeatherChosen ) / 8
ZeroTime = 0
; viewDistance = param2 - (param2 % 100)
viewDistance = 1300
; SkipTime ([0,9,15,21,0] select ZeroTime)
; [] exec "Common\TimeWeather.sqs"
PricingMode = 0

setViewDistance viewDistance
;player globalchat format ["fixedStartPos=%1, timeLimit=%2, maxGroupSize=%3, viewDistance=%4" ,fixedStartPos, timeLimit, maxGroupSize, viewDistance]

; UPGRADES
; upgDefs entry format: [sName, nCost, nMinutes]
; The constant used for passing upg is 100 thus quite enough up till now
_type = 0
upgDefs = []

upgTL = _type; 					upgDefs set [_type, ["Update Leader Weapons", [4000, 4] select dev, [1, 0] select dev]]; _type=_type+1

upgTownGroup = _type; 			upgDefs set [_type, ["Town Groups", [4000, 4] select dev, [1, 0] select dev]]; _type=_type+1

upgTownGroupb = _type; 			upgDefs set [_type, ["Town Groups Armor", [15000, 15] select dev, [3, 0] select dev]]; _type=_type+1

upgTownGroupH = _type; 			upgDefs set [_type, ["Town Armors Heavy", [60000 + 5000*restanksx, 6] select dev, [5, 0] select dev]]; _type=_type+1

upgRadarArtillery = _type; 		upgDefs set [_type, ["Artillery Radar", [5000, 5] select dev, [2, 0] select dev]]; _type=_type+1

upgLongWeaponRange = _type; 	upgDefs set [_type, [format[{%1m Range Weapons}, 2*viewDistance], [30000, 30] select dev, [3, 0] select dev]]; _type=_type+1

upgCCdistance = _type; 			upgDefs set [_type, [format[ {%1m CC range}, distMaxCCUpgraded ], [20000, 20] select dev, [3, 0] select dev]]; _type=_type+1

upgNumBuildings = _type; 		upgDefs set [_type, ["More Buildings", [20000, 20] select dev, [3, 0] select dev]]; _type=_type+1

upgSatCam = _type; 				upgDefs set [_type, ["Satellite Camera", [35000, 35] select dev, [5, 0] select dev]]; _type=_type+1

upgSatCamZoom = _type; 			upgDefs set [_type, ["Satellite Camera Zoom", [20000, 20] select dev, [1, 0] select dev]]; _type=_type+1

upgSpySat = _type; 				upgDefs set [_type, ["Spy Satellite", [95000, 95] select dev, [6, 0] select dev]]; _type=_type+1

upgTraceSpecialShell = _type; 	upgDefs set [_type, ["Trace Special Shell", [10000, 10] select dev, [2, 0] select dev]]; _type=_type+1

upgWorkers = _type; 			upgDefs set [_type, ["Upgrade Workers", [5000, 5] select dev, [2, 0] select dev]]; _type=_type+1

upgGunshipRocket = _type; 		upgDefs set [_type, ["Helicopter Rockets", [25000, 25] select dev, [3, 0] select dev]]; _type=_type+1

upgPlaneAfterBurner = _type; 	upgDefs set [_type, ["Plane After Burner", [20000, 20] select dev, [3, 0] select dev]]; _type=_type+1

upgSpoofMissile = _type; 		upgDefs set [_type, ["Aircraft Spoof Missile", [20000, 20] select dev, [3, 0] select dev]]; _type=_type+1

upgAltFlight = _type; 			upgDefs set [_type, ["1500m Flight Altitude", [30000, 30] select dev, [3, 0] select dev]]; _type=_type+1

upgVehicleAirRadar = _type; 	upgDefs set [_type, ["Vulcan/Shilka AirRadar", [8000, 8] select dev, [2, 0] select dev]]; _type=_type+1

upgRedTopRange = _type; 		upgDefs set [_type, ["4xAA 4000m Missile", [8000, 8] select dev, [2, 0] select dev]]; _type=_type+1

upgRedTopMagazines = _type; 	upgDefs set [_type, ["4xAA 2x Magazines", [8000, 8] select dev, [2, 0] select dev]]; _type=_type+1


; upgMatrix entry format: 0=not begun, 1=in progress, 2=upgraded
upgMatrix = [ [], [] ]
_index = 0
{ (upgMatrix select si0) set [_index, 0]; (upgMatrix select si1) set [_index, 0]; _index=_index+1} foreach upgDefs

; SCORE
_type = 0
scoreDefs = []
scInfantry = _type; scoreDefs set [_type, ["Infantry",1]]; _type=_type+1
scVehicle = _type; scoreDefs set [_type, ["Vehicle",2]]; _type=_type+1
scMHQ = _type; scoreDefs set [_type, ["MHQ",10]]; _type=_type+1
scStruct = _type; scoreDefs set [_type, ["Struct",4]]; _type=_type+1
scTown = _type; scoreDefs set [_type, ["Town",4]]; _type=_type+1

_scoreStart = []
_scoreStart resize (count scoreDefs)
_index = 0
{ _scoreStart set [_index, 0]; _index=_index+1 } foreach _scoreStart

groupMatrix = [[], [], []]
groupNameMatrix = [[], []]
groupUnitIDMatrix = [[], []]
groupAiMatrix = [[], []]
groupMoneyMatrix = [[], []]
groupUnitsBuildingMatrix = [[], []]
groupScoreMatrix = [[], []]
groupCommander = [grpNull, grpNull]
giCO = [0, 0]


_groups = []
_groupNames = []

_i = 0
_c = count callsigns
#SetGroupID
  _si = si0
  _groups = groupMatrix select _si
  _groupNames = groupNameMatrix select _si
  _group = format["Group%1%2", callsigns select _i, _si]
  _test = format["%1 != grpNull", _group]
  ? call _test : call format["%1 setGroupId [""%2"", ""GroupColor0""]", _group, callsigns select _i]; call format["_groups set [count _groups, %1]", _group]; call format["_groupNames set [count _groupNames, ""%1""]", callsigns select _i]; _ids = []; _j = 0; while "_j <= 12" do { _ids set [_j, format["%1 %2:%3", sideNames select _si, callsigns select _i, _j] ]; _j = _j + 1 }; _UID = groupUnitIDMatrix select _si; _UID set [count _UID, _ids]

  _si = si1
  _groups = groupMatrix select _si
  _groupNames = groupNameMatrix select _si
  _group = format["Group%1%2", callsigns select _i, _si]
  _test = format["%1 != grpNull", _group]
  ? call _test : call format["%1 setGroupId [""%2"", ""GroupColor0""]", _group, callsigns select _i]; call format["_groups set [count _groups, %1]", _group]; call format["_groupNames set [count _groupNames, ""%1""]", callsigns select _i]; _ids = []; _j = 0; while "_j <= 12" do { _ids set [_j, format["%1 %2:%3", sideNames select _si, callsigns select _i, _j] ]; _j = _j + 1 }; _UID = groupUnitIDMatrix select _si; _UID set [count _UID, _ids]

  _i = _i + 1
  ? _i < _c : goto "SetGroupID"

; Planning to Initialize worker and town groups


_si = si0
_i = 0
_c = count (groupMatrix select _si)
? _c == 0 : goto "Side0Empty"
groupCommander set [_si, (groupMatrix select _si) select 0]
#InitSide0Groups
	(groupMoneyMatrix select _si) set [_i, 0]
	(groupUnitsBuildingMatrix select _si) set [_i, 0]
	(groupScoreMatrix select _si) set [_i, +_scoreStart]
	_i = _i + 1
	? _i < _c : goto "InitSide0Groups"
#Side0Empty

_si = si1
_i = 0
_c = count (groupMatrix select _si)
? _c == 0 : goto "Side1Empty"
groupCommander set [_si, (groupMatrix select _si) select 0]
#InitSide1Groups
	(groupMoneyMatrix select _si) set [_i, 0]
	(groupUnitsBuildingMatrix select _si) set [_i, 0]
	(groupScoreMatrix select _si) set [_i, +_scoreStart]
	_i = _i + 1
	? _i < _c : goto "InitSide1Groups"
#Side1Empty
InitStructureReady = false
[] exec "Common\Init\TheWorld.sqs"

_initUnitTypes = "Common\InitUnitTypes.sqs"; _initStructureTypes = "Common\InitStructureTypes.sqs"
; ? boole_Infantry_Mode : _initUnitTypes = "Common\InitUnitTypes_Infantry_Mode.sqs"; _initStructureTypes = "Common\InitStructureTypes_Infantry_Mode.sqs"
[] exec "Common\InitPublicVariables.sqs"
[] exec _initStructureTypes
[] exec _initUnitTypes
[] exec "Common\InitInfoMsgTypes.sqs"
[] exec "Common\InitEquipmentTypes.sqs"


; town descriptor indexes
tdFlag = 0
tdName = 1
tdValue = 2
tdSide = 3

; init functions (stuff that return values)
[] exec "Common\InitFunctions.sqs"
; AI Group Settings/Orders
[] exec "Common\InitAIOptions.sqs"

; WAYPOINTS
countWPPlayer = 10; countWPCO = 20; countTargetMarkers = 10
wpCO = [[],[]]
_i = 0; while "_i < countWPCO" do { (wpCO select si0) set [_i, [-1,-1]]; _i = _i + 1 } 
_i = 0; while "_i < countWPCO" do { (wpCO select si1) set [_i, [-1,-1]]; _i = _i + 1 }

; { _index = 0; while "_index < countWaypoints" do { (waypoint select _x) set [_index, []];  _index = _index + 1 } } foreach [si0, si1]

; vehicleAttached format: [ [tug, [vehicleCenter, vehicleRight, vehicleLeft]], ...]
tsTug = 0
tsTugged = 1
tsCenter = 0
tsRight = 1
tsLeft = 2
vehicleAttached = []
ttHeli = 0
ttBoat = 1
ttTruck = 2
ttAPC = 3
; vehicleTuggedServer is used to check vehicles' position and fix the attach/detach position bug
vehicleTuggedServer = []; vehicleTugServer = []


; MESSAGE HANDLERS (SERVER AND CLIENTS)
[] exec "Common\MsgScore.sqs"
[] exec "Common\MsgAIGroupOrder0.sqs"
[] exec "Common\MsgAIGroupOrder1.sqs"
[] exec "Common\MsgAIGroupOrder2.sqs"
[] exec "Common\MsgAIGroupOrder3.sqs"
[] exec "Common\MsgAIGroupOrder4.sqs"
[] exec "Common\MsgAIGroupSetting0.sqs"
[] exec "Common\MsgAIGroupSetting1.sqs"
[] exec "Common\MsgAIGroupSetting2.sqs"
[] exec "Common\MsgAIGroupSetting3.sqs"
[] exec "Common\MsgAIGroupSetting4.sqs"
[] exec "Common\MsgSetWPCO.sqs"
[] exec "Common\MsgVehicleAttached.sqs"
[] exec "Common\MsgDetachVehicle.sqs"
[] exec "Common\MsgVehicleDetached.sqs"
[] exec "Common\MsgLock.sqs"
[] exec "Common\MsgUnlock.sqs"
[] exec "Common\MsgVehicleMagsRemove.sqs"

{ [] exec format ["Common\Msg\mRearmVehGeneral%1.sqs", _x] } forEach [0,1,2,3,4]


[] exec "Common\MsgEjectUnit.sqs"
[] exec "Common\MsgFuelVehicle.sqs"
[] exec "Common\MsgTransportTurnOn.sqs"
[] exec "Common\MsgTransportTurnOff.sqs"
[] exec "Common\MsgUnitBuilt_0.sqs"
[] exec "Common\MsgUnitBuilt_1.sqs"
[] exec "Common\MsgUnitBuilt_2.sqs"
[] exec "Common\MsgUnitBuilt_3.sqs"
[] exec "Common\MsgUnitBuilt_4.sqs"
[] exec "Common\MsgObjectRepaired.sqs"
[] exec "Common\MsgStructMatrixRemove.sqs"

[] exec "Common\MsgAITemporaryOrder.sqs"
? bool_TZK_199_Mode: [] exec "Common\Msg\mSpoofTarget.sqs", [] exec "Common\Msg\mSwitchMagazine.sqs"


; SORT TOWNS
_c = count towns
_i = 0
#SortTownsNextI
  _j = _i + 1
  #SortTownsNextJ
		_townI = towns select _i;
		_townJ = towns select _j;
		? ((getPos (_townI select tdFlag)) select 1) > ((getPos (_townJ select tdFlag)) select 1) : goto "SortTownsSkip"
		towns set [_i, _townJ];
		towns set [_j, _townI];
    #SortTownsSkip
    _j = _j + 1
    ? _j < _c : goto "SortTownsNextJ"

  _i = _i + 1
  ? _i < (_c - 1) : goto "SortTownsNextI"

; calc map center by using town positions
_posX = 0
_posY = 0
{ _posX = _posX + ((getPos (_x select tdFlag)) select 0); _posY = _posY + ((getPos (_x select tdFlag)) select 1) } foreach towns
posCenter = [_posX/_c, _posY/_c]

townGroups=[ [], [], [] ]; workerGroups = [ [], [] ]; patrolGroups = []
mutexDynamicInitializeGroups = false; [] exec "Common\Dynamic\GroupsClear.sqs"
timeReinforceTown = 3*60

? isServer: [] exec "Server\InitServer.sqs"
? !isServer: [] exec "Player\InitClient.sqs"


; New contents added in later version. **BEFORE Any Delay.**
; ================================================================================TZK_4.0.0 Block================================================================================
; Vote System. Format of elements: [name, items[], default value]
Vote_Matrix = []
_voteItemArrayName = "Vote_Item_Weather"; call (_voteItemArrayName + " = [{Sunny}, {Cloudy}, {Overcast}, {Rainy}, {Stromy}, {Misty}, {Foggy}, {Random}]")
Vote_Matrix set [ count Vote_Matrix, ["Weather", call _voteItemArrayName, 0, 0] ]
; This definition is to display the way using string and call to define global array.

Vote_Item_TimeBoost = ["OFF", "ON"]
Vote_Matrix set [ count Vote_Matrix, ["Time Boost", Vote_Item_TimeBoost, 0, 0] ]

Vote_Item_TimePeriod = ["Morning", "Noon", "AfterNoon", "Dusk", "Evening", "Dawn"]; Vote_Item_PeriotMoment = [8, 11, 14, 17, 20, 24+5]
Vote_Matrix set [ count Vote_Matrix, ["Period", Vote_Item_TimePeriod, 0, 0] ]

Vote_Item_View_Distance = ["1300", "1500", "1600"];
Vote_Matrix set [ count Vote_Matrix, ["View Distance", Vote_Item_View_Distance, 0, 0] ]

Vote_Item_Time_Limit_Name = ["3h", "4h", "6h", "Infinity"];   Vote_Item_Time_Limit_Hours = [3, 4, 6, 0];
Vote_Matrix set [ count Vote_Matrix, ["Time Limit", Vote_Item_Time_Limit_Name, 1, 1] ]

Vote_Item_Resistance = ["Very Low", "Low", "Middle", "High", "Doom"];
Vote_Matrix set [ count Vote_Matrix, ["Resistance", Vote_Item_Resistance, restanksx - 1, restanksx - 1] ]

Vote_Item_IncomeRate = ["1x", "2x"];
Vote_Matrix set [ count Vote_Matrix, ["Income Ratio", Vote_Item_IncomeRate, 0, 0] ]


pvVoteStart0 = -1; pvVoteReceived0 = -1; pvVoteResult0 = -1; pvVoteAdmin = false
? isServer: mutexVote = false
? !isNull player: [] exec "Player\Msg\mVoteReceived.sqs", lvVoteReceived0 = -1, mutexVote = false, [] exec "Player\Msg\mVoteResult.sqs"

; Weather.
pvWeather_Value = 0; pvWeather_Delay = 2*60; pvWeather_Cycle = 10*60
Weather_TZK = "Sunny"
? isServer: [] exec "Server\Loop\Weather.sqs"
? !isNull player: [] exec "Player\Loop\Weather.sqs"

; TimeBoost
; Although BIKI said that skipTime should executed on server, it requires being executed on all clients. So do those weather commands. Probably they're local but not global effect.
pvDaytime = dayTime; pvTimeBoost = false
? isServer: [] exec "Server\Loop\TimeBoost.sqs"
? !isNull player: [] exec "Player\Loop\TimeBoost.sqs"

; TimePeriod (Morning, Dusk, Evening, etc). Using index but not string as indicator, aiming to compatible with "publicVariable"-able type in OFP.
Period_TZK = 0

; viewDistance
; Time Limit
; Resistance
; Income

; func_RK4_Range = preProcessFile "Common\SQF\RK4_Range.sqf"
; ================================================================================TZK_4.0.0 Block================================================================================