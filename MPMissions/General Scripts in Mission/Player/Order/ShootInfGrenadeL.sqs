; args: [unit, marker, target, useless parameter, dispersion, (bigger angle)]

_unit = _this select 0
_marker = _this select 1
_target = _this select 2
_type = _this select 3; _dispersion = _this select 4; _biggerAngle = (if (count _this > 5) Then {_this select 5} Else {0})

_si = siPlayer; _uid = [_unit, _si, giPlayer] call funcCalcUID
? _uid > 12: hint "Fail to get UID, order not set. Try again please."; exit
_id = (playerOrderID select _uid) + 1; [_uid, _id] exec "\TZK_Scripts_4_0_4\Player\Order\New.sqs"

_vehicle = vehicle _unit; _typeName = typeOf _vehicle; _actualTarget = typeOf _target camCreate getPosASL _target; _actualTarget exec "\TZK_Scripts_4_0_4\Common\Command\allowDamageFalse.sqs"; _script = "Common\EH\Fired_ReviseShellDir.sqs"
? _biggerAngle > 0: _heliH = typeOf _target camCreate [0,0,0]; _script = "Common\EH\Fired_ReviseShell_BigAngle.sqs"
? !(_unit in PlayerShootingUnits): PlayerShootingUnits set [_uid, _unit]
; CheckDistance
_posOrdered = getPosASL _vehicle; _distLimit = 500; _hint = "Target is too far for infantry Grenade. Order aborted."
? ([_unit, _target] call funcDistH) > _distLimit: _unit groupChat _hint; goto "Exit"
#PrepareToMove
_unit doMove _posOrdered
? _unit distance _target < 150: goto "PrePareToAttack"
	_unit groupChat "Too far away. Moving to get close enough (about 130 meters)."; _timeStart = time; _timeHint = _timeStart + 5*60; 
	_hint = {["I've been running for %1 minutes. Distance %2 meters now.", (_timeHint -_timeStart)/60, (_unit distance _target) - (_unit distance _target)%1]}
#CheckPosReached
	_vector = [getPos _target, getPos _unit] call funcVectorSub; _dist = (_unit distance _target) - 130
	_vector = [_vector, _dist/(_dist+130)] call funcVectorScale; _destination = [getPos _unit, _vector] call funcVectorAdd
	_unit doMove _destination
	~5
	? call orderCheck: goto "Exit"
	? !(alive _unit) || _unit != vehicle _unit: goto "Exit"
	? time > _timeHint: call format _hint; _timeHint = _timeHint + 5*60
	? _unit distance _target > 150: goto "CheckPosReached"
	_posOrdered = getPosASL _vehicle
#PrePareToAttack
	_weapon = primaryWeapon _unit; _validMags = ["GrenadeLauncher", "GP25_Grenade_xj400", "GP25_Vest_xj400", "M203_Grenade_xj400", "M203_Vest_xj400", "MM1Magazine", "6G30Magazine", _weapon]
	? !(_weapon in ["M16GrenadeLauncher_TZK_xj400", "AK74GrenadeLauncher_TZK_xj400", "M4_M203_ACOG_SD_xj400", "AK74M_GP25_1P29_SD_xj400", "MM1", "6G30"]): _unit groupChat "I'm not a Grenade soldier. Order Aborted.", goto "Exit"
	_unit groupChat "Target in range. Prepare to attack.";
	; doStop _unit
	_vehicle reveal _actualTarget
	_vehicle doTarget _actualTarget
	
	_delay = 3
	; Delay for turning the turret. It'll be good to obtain proper value by the angle's difference, however no way to compute this in OFP.
	~_delay
	; For TZK customed GL, the "muzzle" using same name as "weapon".
	#AttackCheck
		_posTarget = [getPos _target, 0, _dispersion] call funcGetRandomPos; _posTarget set [2,0]; _actualTarget setPos _posTarget
		? _unit distance _target > 150: goto "PrepareToMove"
		? _biggerAngle > 0: _posH = [_posTarget, getPos _vehicle] call funcVectorSub, _posH set [2,1], _length = _posH call funcVectorLength, _posH = [_posH, 600/_length] call funcVectorScale, _posH set [2, 6*173.2], _posH = [_posH, getPos _vehicle] call funcVectorAdd, _heliH setPos _posH, _vehicle reveal _heliH
		_magazines = _unit call funcGetNotEmptyMags
		? "_x in _validMags" count _magazines == 0: goto "CheckRearm"
		? bool_TZK_199_Mode: if ("_x in _validMags" count _magazines == 1 && _vehicle ammo _weapon == 0) Then {goto "CheckRearm"}
		_vehicle reveal _actualTarget
		~0.1
		if (_biggerAngle > 0) Then "_vehicle doTarget _heliH" Else "_vehicle doTarget _actualTarget"
		
		; delay must be correctly assigned for "fire" command.
		_delay = if (_weapon == "MM1" || _weapon == "6G30") Then {0.6} Else {5}
		
		~_delay
		? call orderCheck: goto "Exit"
		? !(alive _unit) || _vehicle != vehicle _unit: goto "Exit"
		
		if bool_TZK_Art_RK4 Then {_ehRev = _vehicle addEventHandler ["Fired",""], _vehicle removeEventHandler ["Fired", _ehRev], _vehicle addEventHandler [ "Fired", format [{[_this, %1, %2, true, 60, 150] exec "%3"}, getPosASL _actualTarget, _ehRev, _script] ]}; _vehicle fire _weapon
		goto "AttackDone"
		
		#AttackDone
		~0.1
		if (_biggerAngle > 0) Then "_vehicle doWatch _posH" Else "_vehicle doWatch (getPos _actualTarget)"
	goto "AttackCheck"
#CheckRearm
	_magData = (_unit call funcGetRearmData) select 1
	_vs = ([getPos _unit, 500, (typesSupport select si0) + (typesSupport select si1) + [(typesMHQ select _si)] +[jeepaW,uazaE], []] call funcGetNearbyVehicles) + ([getPos _unit, 500, [stAmmoCrate, stBarracks], [], _si] call funcGetNearbyStructure) + ([getPos _unit, 500, [stAmmoCrate], [], siEnemy select _si] call funcGetNearbyStructure)
	? count _vs == 0: _unit groupChat "No support vehicle within 500 meters. Magazines exhausted. Order aborted."; goto "Exit"
	_distMin = 500; _sup = objNull
	{ _dist = _unit distance (_x select 0); if (_dist < _distMin) then { _sup = (_x select 0); _distMin = _dist } } foreach _vs
	? isNull _sup: _unit groupChat "No support vehicle near. Magazines exhausted. Order aborted."; goto "Exit"
	_unit groupChat "Moving to support vehicle for more magazines."

	_timeAbort = time + 15*60
	#MoveToSupport
		_posMove = [[0, 5], (getDir _sup)] call funcVectorRot2D
		_posMove = [getPos _sup, _posMove] call funcVectorSub
		_unit doMove _posMove
		~5
		? !(alive _unit) || _unit != vehicle _unit: goto "Exit"
		? call orderCheck: goto "Exit"
		? !(alive _sup): goto "CheckRearm"
		? time > _timeAbort: _unit groupChat "Cost too much time. Unable to reach support vehicle. Order aborted."; goto "Exit"
		? (_unit distance _sup) > 10: goto "MoveToSupport"
	_unit groupChat "Rearming at support vehicle."; [_unit, _sup] exec "Player\Rearm.sqs"; doStop _unit
	#WaitRearmComplete
		~5
		? call orderCheck: goto "Exit"
		? !(alive _unit) || _vehicle != vehicle _unit: goto "Exit"
		? !someAmmo _vehicle: goto "WaitRearmComplete"
	goto "PrepareToMove"

#Exit
deleteVehicle _actualTarget; PlayerShootingUnits set [_uid, objNull]
? _biggerAngle > 0: deleteVehicle _heliH
exit