; args: [_unit, _si, _gi, _attackPos, _radius, _target, _dispersion]

_unit = _this select 0; _si = _this select 1; _gi = _this select 2
_attackPos = _this select 3; _radius = _this select 4
_target = _this select 5; _dispersion = _this select 6

_vehicle = vehicle _unit; _typeName = typeOf _vehicle; _actualTarget = typeOf _target camCreate getPosASL _target; _actualTarget exec "\TZK_Scripts_4_0_4\Common\Command\allowDamageFalse.sqs"
#CheckDistance
_posOrdered = getPosASL _vehicle; _distLimit = 300; _hint = "Target is too far for infantry Throw. Order aborted."
? ([_unit, _target] call funcDistH) > _distLimit: _unit groupChat _hint; goto "EOF"
#PrepareToMove
? ([_unit, _posOrdered] call funcDistH) < 20: _unit doMove _posOrdered
? _unit distance _target < 60: goto "PrePareToAttack"
	_unit groupChat "Too far away. Moving to get close enough (about 50 meters)."; _timeStart = time; _timeHint = _timeStart + 5*60; 
	_hint = {["I've been running for %1 minutes. Distance %2 meters now.", (_timeHint -_timeStart)/60, (_unit distance _target) - (_unit distance _target)%1]}
#CheckPosReached
	_vector = [getPos _target, getPos _unit] call funcVectorSub; _dist = (_unit distance _target) - 50
	_vector = [_vector, _dist/(_dist+50)] call funcVectorScale; _destination = [getPos _unit, _vector] call funcVectorAdd
	_unit doMove _destination
	~5
	? !(_unit call temporaryCheck): goto "EOF"
	? !(alive _unit) || _unit != vehicle _unit: goto "EOF"
	? time > _timeHint: call format _hint; _timeHint = _timeHint + 5*60
	? _unit distance _target > 60: goto "CheckPosReached"
	_posOrdered = getPosASL _vehicle
#PrePareToAttack
	? !(_unit hasWeapon "Throw"): _unit groupChat "I can't throw anything. Order Aborted.", goto "EOF"
	_unit groupChat "Target in range. Prepare to attack.";
	; doStop _unit
	_vehicle reveal _actualTarget
	_vehicle doTarget _actualTarget
	
	_delay = 3
	; Delay for turning the turret. It'll be good to obtain proper value by the angle's difference, however no way to compute this in OFP.
	~_delay
	; For TZK customed GL, the "muzzle" using same name as "weapon".
	_numOfMagLast = 1 + ("_x in [{HandGrenade}, {SmokeShell}, {SmokeShellGreen}, {SmokeShellRed}]" count magazines _unit)
	#AttackCheck
		_posTarget = [getPos _target, 0, _dispersion] call funcGetRandomPos; _posTarget set [2,0]; _actualTarget setPos _posTarget
		? _unit distance _target > 60: goto "PrepareToMove"
		; Rearm check should be placed in loop below, due to time cost of animation.
		_vehicle reveal _actualTarget
		~0.1
		_vehicle doTarget _actualTarget
		
		; delay must be correctly assigned for "fire" command.
		#WaitUntilReload
			_delay = 2
			~_delay
			? !(_unit call temporaryCheck): goto "EOF"
			? !(alive _unit) || _vehicle != vehicle _unit: goto "EOF"
		_magazines = _unit call funcGetNotEmptyMags
		? "_x in [{HandGrenade}, {SmokeShell}, {SmokeShellGreen}, {SmokeShellRed}]" count _magazines == 0: goto "CheckRearm"
		? bool_TZK_199_Mode: if ("_x in [{HandGrenade}, {SmokeShell}, {SmokeShellGreen}, {SmokeShellRed}]" count _magazines == 1 && _vehicle ammo "Throw" == 0) Then {goto "CheckRearm"}
			? ("_x in [{HandGrenade}, {SmokeShell}, {SmokeShellGreen}, {SmokeShellRed}]" count magazines _unit) >= _numOfMagLast: goto "WaitUntilReload"
		_numOfMagLast = "_x in [{HandGrenade}, {SmokeShell}, {SmokeShellGreen}, {SmokeShellRed}]" count magazines _unit
		
		_ehRev = _vehicle addEventHandler ["Fired",""], _vehicle removeEventHandler ["Fired", _ehRev], _vehicle addEventHandler [ "Fired", format [{[_this, %1, %2, true, 22, 60] exec "Common\EH\Fired_ReviseShellDir.sqs"}, getPosASL _actualTarget, _ehRev] ]; _vehicle fire "Throw"
		goto "AttackDone"
		
		#AttackDone
		~0.1
		_vehicle doWatch (getPos _actualTarget)
	goto "AttackCheck"
#CheckRearm
	_magData = (_unit call funcGetRearmData) select 1
	_vs = [getPos _unit, 500, (typesSupport select si0) + (typesSupport select si1) + [(typesMHQ select _si)] +[jeepaW,uazaE], []] call funcGetNearbyVehicles
	? count _vs == 0: _vs = [getPos _unit, 500, [stAmmoCrate, stBarracks], [], _si] call funcGetNearbyStructure
	? count _vs == 0: _vs = [getPos _unit, 500, [stAmmoCrate], [], siEnemy select _si] call funcGetNearbyStructure
	? count _vs == 0: _unit groupChat "No support vehicle within 500 meters. Magazines exhausted. Order aborted."; goto "EOF"
	_distMin = 500; _sup = objNull
	{ _dist = _unit distance (_x select 0); if (_dist < _distMin) then { _sup = (_x select 0); _distMin = _dist } } foreach _vs
	? isNull _sup: _unit groupChat "No support vehicle near. Magazines exhausted. Order aborted."; goto "EOF"
	_unit groupChat "Moving to support vehicle for more magazines."

	_timeAbort = time + 15*60
	#MoveToSupport
		_posMove = [[0, 5], (getDir _sup)] call funcVectorRot2D
		_posMove = [getPos _sup, _posMove] call funcVectorSub
		_unit doMove _posMove
		~5
		? !(alive _unit) || _unit != vehicle _unit: goto "EOF"
		? !(_unit call temporaryCheck): goto "EOF"
		? !(alive _sup): goto "CheckRearm"
		? time > _timeAbort: _unit groupChat "Cost too much time. Unable to reach support vehicle. Order aborted."; goto "EOF"
		? (_unit distance _sup) > 10: goto "MoveToSupport"
	[_unit, _si, _gi, _vehicle, _type, _sup] exec "Server\AI_Rearm.sqs"; [_unit, true] exec "\TZK_Scripts_4_0_4\Server\StopAI.sqs"
	#WaitRearmComplete
		~5
		? !(_unit call temporaryCheck): goto "EOF"
		? !(alive _unit) || _vehicle != vehicle _unit: goto "EOF"
		? !someAmmo _vehicle: goto "WaitRearmComplete"
	goto "PrepareToMove"

; End Of File
#EOF
_unit call busyClear
_unit call temporaryClear
deleteVehicle _actualTarget
exit